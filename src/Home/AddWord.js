
import React from "react";
import {
    SafeAreaView,
    StyleSheet,
    TextInput,
    Text,
    View,
    Button,
    ScrollView,
    Picker,
    KeyboardAvoidingView,
    TouchableOpacity,
} from "react-native";
import DateTimePicker from '@react-native-community/datetimepicker';
import { homeStore } from './homeStore';
var PushNotification = require('react-native-push-notification');

export interface Props {
    name: string;
    enthusiasmLevel?: number;
}

interface State {
    enthusiasmLevel: number;
}

export default class AddWordScreen extends React.Component<Props, State> {

    constructor(props) {
        super(props);
        this.state = {
            word: '',
            meaning: '',
            example: '',
            period: '',
            time: new Date(),
            showDateSelection: false,
        };
    }

    async pushTestNotification(title = 'Title', message = 'Message') {
        const id = homeStore.words.length + 1;
        await PushNotification.localNotificationSchedule({
            /* Android Only Properties */
            id: id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            // ticker: 'My Notification Ticker', // (optional)
            autoCancel: true, // (optional) default: true
            largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
            smallIcon: 'ic_launcher', // (optional) default: "ic_notification" with fallback for "ic_launcher"
            bigText: '', // (optional) default: "message" prop
            // subText: 'sub textsu tsub text', // (optional) default: none
            // color: 'red', // (optional) default: system default
            vibrate: true, // (optional) default: true
            vibration: 400, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
            tag: "", // (optional) add tag to message
            group: '', // (optional) add group to message
            ongoing: false, // (optional) set whether this is an "ongoing" notification
            priority: 'high', // (optional) set notification priority, default: high
            visibility: 'private', // (optional) set notification visibility, default: private
            importance: 'high', // (optional) set notification importance, default: high
            title: title, // title on band => 40 characters is the best 
            message: message, // (required)// message on band=> multiple line 80 characters is the best
            date: new Date(Date.now() + 0 * 1000),
            // repeatType: "time",
            // repeatTime: 1000
            // actions: '["Yes", "No"]',
        });
        console.log("Push notification successfully!");
    }

    setDate = (event, time) => {
        // event.type: set or dismissed
        time = time || this.state.time;
        if (event.type == 'set') {
            this.setState({
                time: new Date(time + ''),
                showDateSelection: false,
            });
        } else {
            this.setState({
                showDateSelection: false,
            });
        }
    }

    componentDidMount = () => {

    }

    _onPressSelectTime = () => {
        this.setState({
            showDateSelection: true,
        });
    }

    onPressSave = () => {
        console.log('onclick save', this.state);
        console.log(homeStore.words);
        homeStore.words.push('x');
    }

    onPressSendATest = () => {
        this.pushTestNotification(this.state.word, this.state.meaning + this.state.example);
    }

    render() {
        return (
            <SafeAreaView >
                <KeyboardAvoidingView>
                    <ScrollView>
                        <View style={styles.row}>
                            <Text style={styles.inputTitle}>Word:</Text>
                            <TextInput
                                style={styles.input}
                                onChangeText={(word) => this.setState({ word })}
                                placeholder="Input your words"
                                value={this.state.word}
                            />
                        </View>
                        <View style={styles.row}>
                            <Text style={styles.inputTitle}>Meaning:</Text>
                            <TextInput
                                style={styles.input}
                                onChangeText={(meaning) => this.setState({ meaning })}
                                placeholder="Input the meaning"
                                value={this.state.meaning}
                            />
                        </View>
                        <View style={styles.row}>
                            <Text style={styles.inputTitle}>Example:</Text>
                            <TextInput
                                style={[styles.input, styles.textArea]}
                                multiline={true}
                                numberOfLines={3}
                                placeholder="Input an example"
                                underlineColorAndroid="transparent"
                                onChangeText={(example) => this.setState({ example })}
                                value={this.state.example}
                            />
                        </View>
                        <View style={[styles.row, { flex: 1, flexDirection: 'row', alignItems: 'center' }]}>
                            <Text style={[{ flex: 1 }, styles.inputTitle]}>Repeat:</Text>
                            <Picker
                                style={[styles.input, { flex: 1, alignSelf: 'flex-end' }]}
                                selectedValue={this.state.repeat}
                                onValueChange={(itemValue, itemIndex) =>
                                    this.setState({ repeat: itemValue })
                                }>
                                <Picker.Item label="Java" value="java" />
                                <Picker.Item label="JavaScript" value="js" />
                            </Picker>
                        </View>
                        <View style={[styles.row, { flex: 1, flexDirection: 'row', alignItems: 'center' }]}>
                            <Text style={[{ flex: 1 }, styles.inputTitle]}>Time:</Text>
                            <TouchableOpacity
                                style={[styles.input, { flex: 1, alignSelf: 'flex-end' }]}
                                onPress={this._onPressSelectTime}>
                                <Text >{(this.state.time).getHours().toString() + ' : ' + ((this.state.time).getMinutes() < 10 ? '0' : '') + (this.state.time).getMinutes()}</Text>
                            </TouchableOpacity>
                        </View>
                        <View style={styles.row}>
                            <Button
                                onPress={() => this.onPressSave()}
                                title="Save"
                            />
                        </View>
                        <View style={styles.row}>
                            <Button
                                onPress={() => this.onPressSendATest()}
                                title="Send a test"
                            />
                        </View>
                        {
                            this.state.showDateSelection ? (
                                <View>
                                    <DateTimePicker value={this.state.time}
                                        mode={'time'}
                                        is24Hour={true}
                                        display="default"
                                        onChange={this.setDate} />
                                </View>
                            ) : (<View></View>)
                        }
                    </ScrollView>
                </KeyboardAvoidingView>
            </SafeAreaView>
        );
    }
}

const styles = StyleSheet.create({
    container: {
        padding: 10,
    },
    row: {
        margin: 5,
        marginLeft: 6,
        marginRight: 6,
    },
    inputTitle: {
        fontWeight: 'bold',
    },
    input: {
        borderColor: '#c1c1c1',
        borderTopWidth: 0,
        borderLeftWidth: 0,
        borderRightWidth: 0,
        borderRadius: 0,
        height: 40,
        borderWidth: 1,
        padding: 10,
        paddingLeft: 0,
        paddingRight: 0,
    },
    textArea: {
        height: 100,
        justifyContent: 'flex-start',
        textAlignVertical: 'top'
    },
});

